@using System.Globalization
@using Mycropad.Lib.Profiles
<div class="flex flex-col h-full">
    <form class="h-80 p-1 grid grid-cols-4 gap-4">
        <div class="col-span-4">
            <label for="key-name" class="select-none text-sm font-medium block mb-2">Name</label>
            <input class="bg-gray-100 dark:bg-gray-600 border border-gray-300 sm:text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5" type="text" id="key-name" name="key-name" @bind="KeyRecord.Name">
        </div>
        <div class="col-span-4">
            <label for="led-color" class="select-none text-sm font-medium block mb-2">Color</label>
            <div class="flex flex-row">
                <input class="hidden" type="color" id="led-color" name="led-color" value="@_customColor" @onchange="ColorChanged">
                @foreach (var color in _predefinedColors)
                {
                    var borderColorClass = IsSelectedColor(color) ? "border-2 " : "border-4";
                    <div class="w-12 h-10 mx-0.5 rounded-lg border-gray-100 dark:border-gray-800; @borderColorClass"
                         style="background: @color;"
                         @onclick="() => SelectColor(color)">
                    </div>
                }
                @{ var borderColorClassCustom = IsSelectedColor(_customColor) ? "border-2" : "border-4"; }
                <div class="w-12 h-10 mx-0.5 rounded-lg flex justify-center items-center text-gray-400 border-gray-100 dark:border-gray-800 @borderColorClassCustom"
                     style="background: @_customColor;"
                     onclick="document.getElementById('led-color').click()">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
                        <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>
                    </svg>
                </div>
            </div>
        </div>
        <div class="col-span-4 overflow-y-scroll">
            <label class="select-none text-sm font-medium block mb-2">Macro</label>
            @for (var j = 0; j < KeyRecord.KeyCodes.Count; j++)
            {
                var i = j;
                <div class="flex flex-row w-full">
                    <MacroTextBox
                        Id="@($"textbox-{i}")"
                        KeyCode="KeyRecord.KeyCodes[i]"
                        KeyCodeChanged="async kc => await KeyCodeChanged(i, kc)"/>
                    <button
                        id=@($"remove-btn-{i}")
                        class="h-10 w-10 ml-2 p-2"
                        @onclick="() => KeyRecord.KeyCodes.RemoveAt(i)"
                        type="button">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"/>
                        </svg>
                    </button>
                </div>
            }
            <div class="flex flex-row w-full items-end">
                @{
                    var btnClass = "h-10 w-10 ml-2 p-2 " + (IsAddEnabled ? "" : "text-gray-600 dark:text-gray-400");
                    <button
                        id="add"
                        class="@btnClass"
                        @onclick="() => KeyRecord.KeyCodes!.Add(default)"
                        disabled="@(!IsAddEnabled)"
                        type="button">
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z"/>
                        </svg>
                    </button>
                }
            </div>
        </div>
    </form>
    <div class="p-2">
        <button
            id="save-btn"
            @onclick="Save"
            disabled="@(!SaveEnabled)"
            class="@SaveClass">
            Save
        </button>
        <button
            id="cancel-btn"
            @onclick="Cancel"
            class="bg-transparent hover:bg-gray-200 text-gray-400 hover:text-gray-600 font-semibold py-2 px-4 rounded-full">
            Cancel
        </button>
    </div>
</div>

@code {
    private readonly string[] _predefinedColors = ["#8200AC", "#FF0000", "#E9FF00", "#00FF59", "#00FFFF", "#0FC3FF" ];
    private string _customColor = "#000000";

    [Parameter]
    public Keys Key { get; set; }

    [Parameter]
    public KeyRecord KeyRecord { get; set; } = new();

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; } = null!;

    private bool IsAddEnabled => KeyRecord.KeyCodes.Count == 0 || KeyRecord.KeyCodes.Last() != default;
    private bool SaveEnabled => KeyRecord.KeyCodes.All(_ => _ != default);

    private string SaveClass => "text-white font-bold py-2 px-4 rounded-full " +
                                (SaveEnabled ? "bg-blue-400 hover:bg-blue-600" : "bg-grey-400");

    private string LedColorToString(LedColor color) => $"#{color.R:X2}{color.G:X2}{color.B:X2}";

    private bool IsSelectedColor(string color) => LedColorToString(KeyRecord.Color) == color;

    protected override async Task OnParametersSetAsync()
    {
        if (!_predefinedColors.Contains(LedColorToString(KeyRecord.Color)))
        {
            _customColor = LedColorToString(KeyRecord.Color);
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task Save()
    {
        KeyRecord.KeyCodes = KeyRecord.KeyCodes.Select(x => x.SanitizeModifiers()).ToList();

        await ModalInstance.CloseAsync(ModalResult.Ok(KeyRecord));
        await InvokeAsync(StateHasChanged);
    }

    async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }

    private Task KeyCodeChanged(int index, KeyCode? keyCode)
    {
        if(keyCode is not null) KeyRecord.KeyCodes[index] = keyCode.Value;
        return InvokeAsync(StateHasChanged);
    }

    private Task ColorChanged(ChangeEventArgs e)
    {
        var rgbString = e.Value?.ToString();
        if (rgbString is null) return Task.CompletedTask;
        _customColor = rgbString;
        return SelectColor(rgbString);
    }

    private Task SelectColor(string color)
    {
        KeyRecord.Color = new(
            byte.Parse(color[1..3], NumberStyles.HexNumber),
            byte.Parse(color[3..5], NumberStyles.HexNumber),
            byte.Parse(color[5..7], NumberStyles.HexNumber));

        return InvokeAsync(StateHasChanged);
    }

}