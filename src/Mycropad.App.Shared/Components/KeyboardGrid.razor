@inject ProfileManager ProfileManager
@implements IDisposable

@if (Profile.Keymap.Count > 0)
{
    <div class="grid grid-rows-3 grid-flow-col">
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key1]" Clicked="() => UiClicked(Keys.Key1)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key3]" Clicked="() => UiClicked(Keys.Key3)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key5]" Clicked="() => UiClicked(Keys.Key5)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key2]" Clicked="() => UiClicked(Keys.Key2)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key4]" Clicked="() => UiClicked(Keys.Key4)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key6]" Clicked="() => UiClicked(Keys.Key6)"/>
        <div class="flex justify-center items-center row-span-2 col-span-2">
            <KeyboardEncoder Clicked="UiClicked"/>
        </div>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key7]" Clicked="() => UiClicked(Keys.Key7)"/>
        <KeyboardButton KeyRecord="Profile.Keymap[Keys.Key8]" Clicked="() => UiClicked(Keys.Key8)"/>
    </div>
}

@code {

    [CascadingParameter]
    public IModalService Modal { get; set; } = null!;

    [Parameter]
    public KeyProfile Profile { get; set; } = null!;

    protected override void OnInitialized()
    {
        ProfileManager.OnProfilesUpdated += RefreshKeyMap;
    }

    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ProfileManager.OnProfilesUpdated -= RefreshKeyMap;
    }

    private Task RefreshKeyMap()
    {
        return InvokeAsync(StateHasChanged);
    }

    private async Task UiClicked(Keys key)
    {
        var parameters = new ModalParameters
        {
            {nameof(ButtonModal.Key), key},
            {nameof(ButtonModal.KeyRecord), Profile.Keymap[key]},
        };

        var options = new ModalOptions
        {
            HideCloseButton = true,
            Class = "modal-window",
        };

        var modal = Modal.Show<ButtonModal>($"{key} settings", parameters, options);
        var result = await modal.Result;
        if (result is {Cancelled: false, Data: KeyRecord keyRecord})
        {
            Profile.Keymap[key] = keyRecord;
            ProfileManager.UpdateProfile(Profile);
        }
    }

}