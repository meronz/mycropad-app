<div class="flex flex-col h-full">
    <form class="h-80 p-1">
        <div class="my-2">
            <label
                for="macro"
                class="text-sm font-medium block mb-2">
                Macro
            </label>
             <BlazoredTypeahead 
                SearchMethod="@GetAvailableKeys"
                @bind-Values="SelectedKeysString"
                Debounce="10"
                required
                id="macro"
                placeholder="Start typing keys...">
                <SelectedTemplate Context="value">
                    @value
                </SelectedTemplate>
                <ResultTemplate Context="value">
                    @value
                </ResultTemplate>
            </BlazoredTypeahead>
            <span class="flex items-center font-medium tracking-wide text-red-500 text-xs mt-1 ml-1">
                @_validationMessage
            </span>
        </div>
        @if(LedColor != null)
        {
            <div class="my-2">
            <label
                for="ledcolor"
                class="text-sm font-medium block mb-2">
                Color
            </label>
            <input type="color" id="ledcolor" name="ledcolor" value="@_colorString" @onchange="ColorChanged">
            </div>
        }
    </form>
    <div class="p-2">
        <button 
            @onclick="Save"
            class="bg-blue-400 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-full">
            Save
        </button>
        <button 
            @onclick="Cancel"
            class="bg-transparent hover:bg-gray-200 text-gray-400 hover:text-gray-600 font-semibold py-2 px-4 rounded-full">
            Cancel
        </button>
    </div>
</div>

@code {
    [Parameter] public Keys Key { get; set; }
    [Parameter] public KeyCode KeyMacro { get; set; }
    [Parameter] public LedColor LedColor { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    private IList<string> SelectedKeysString { get; set; } = new List<string>();

    private string _validationMessage = "";
    private string _colorString => $"#{LedColor.R:X2}{LedColor.G:X2}{LedColor.B:X2}";

    protected override async Task OnParametersSetAsync()
    {
        SelectedKeysString.Clear();
        (SelectedKeysString as List<string>).AddRange(KeyMacro.ToMacroStrings());
        await InvokeAsync(StateHasChanged);
    }
    
    async Task Save()
    {
        try
        {
            var keyMacro = string.Join('+', SelectedKeysString).ParseKeyCode();
            _validationMessage = "";

            await ModalInstance.CloseAsync(ModalResult.Ok(
                new { 
                    KeyMacro = keyMacro,
                    LedColor = LedColor
                }));
        }
        catch
        {
            _validationMessage = "Invalid macro!";
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }

    private async Task<IEnumerable<string>> GetAvailableKeys(string searchText)
    {
        var result = Enum.GetNames<MacroExtensions.ModifierTokens>()
            .Concat(Enum.GetNames<MacroExtensions.KeyTokens>())
            .Select(x => x.ToUpperInvariant())
            .Where(x => !SelectedKeysString.Contains(x.ToUpperInvariant()))
            .Where(x => x.Contains(searchText.ToUpperInvariant()))
            .ToArray();

        return await Task.FromResult(result);
    }

    private async Task ColorChanged(ChangeEventArgs e)
    {
        var rgbstring = e.Value.ToString();

        LedColor = new LedColor(
            byte.Parse(rgbstring[1..3], System.Globalization.NumberStyles.HexNumber),
            byte.Parse(rgbstring[3..5], System.Globalization.NumberStyles.HexNumber),
            byte.Parse(rgbstring[5..7], System.Globalization.NumberStyles.HexNumber));

        await InvokeAsync(StateHasChanged);
    }

}