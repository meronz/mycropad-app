<div class="flex flex-col h-full">
    <form class="h-80 p-1">
        <div class="my-2">
        <label
            for="keyname"
            class="text-sm font-medium block mb-2">
            Name
        </label>
        <input type="text" id="keyname" name="keyname" @bind="KeyRecord.Name">
        </div>
        <div class="my-2">
            <label
                for="macro"
                class="text-sm font-medium block mb-2">
                Macro
            </label>
            
            @for (int j = 0; j < KeyRecord.KeyCodes?.Count; j++)
            {
                int i = j;
                <div class="flex flex-row w-full">
                    <MacroTextBox
                        Id="i"
                        KeyCode="KeyRecord.KeyCodes[i]"
                        KeyCodeChanged="async (kc) => await KeyCodeChanged(i, kc)"
                    />
                    <button
                        id=@($"remove-btn-{i}")
                        class="h-10 w-10 ml-2 p-2"
                        @onclick="() => KeyRecord.KeyCodes.RemoveAt(i)"
                        type="button"
                    >
                        <svg viewBox="0 0 24 24">
                            <path fill="currentColor" d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z" />
                        </svg>
                    </button>
                </div>
            }
            <div class="flex flex-row w-full items-end">
            @{
                var btnClass = "h-10 w-10 ml-2 p-2 " + (_isAddEnabled ? "" : "text-gray-600 dark:text-gray-400");
                <button
                    id="add"
                    class="@btnClass"
                    @onclick="() => KeyRecord.KeyCodes.Add(null)"
                    disabled="@(!_isAddEnabled)"
                    type="button"
                >
                    <svg viewBox="0 0 24 24">
                        <path fill="currentColor" d="M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z" />
                    </svg>
                </button>
            }
            </div>
        </div>
        @if(KeyRecord.Color != null)
        {
            <div class="my-2">
            <label
                for="ledcolor"
                class="text-sm font-medium block mb-2">
                Color
            </label>
            <input type="color" id="ledcolor" name="ledcolor" value="@_colorString" @onchange="ColorChanged">
            </div>
        }
    </form>
    <div class="p-2">
        <button
            id="save-btn"
            @onclick="Save"
            disabled="@(!_saveEnabled)"
            class="@_saveClass">
            Save
        </button>
        <button
            id="cancel-btn"
            @onclick="Cancel"
            class="bg-transparent hover:bg-gray-200 text-gray-400 hover:text-gray-600 font-semibold py-2 px-4 rounded-full">
            Cancel
        </button>
    </div>
</div>

@code {
    [Parameter] public Keys Key { get; set; }
    [Parameter] public KeyRecord KeyRecord { get; set; }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    
    private string _colorString => $"#{KeyRecord.Color.R:X2}{KeyRecord.Color.G:X2}{KeyRecord.Color.B:X2}";
    private bool _isAddEnabled => KeyRecord.KeyCodes.Count == 0 || KeyRecord.KeyCodes.Last() != null;
    private bool _saveEnabled => KeyRecord.KeyCodes.All(_ => _ != null);
    private string _saveClass => "text-white font-bold py-2 px-4 rounded-full " + 
        (_saveEnabled ? "bg-blue-400 hover:bg-blue-600" : "bg-grey-400");

    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    async Task Save()
    {
        KeyRecord.KeyCodes = KeyRecord.KeyCodes.Select(x => x.SanitizeModifiers()).ToList();
        
        await ModalInstance.CloseAsync(ModalResult.Ok(KeyRecord));
        await InvokeAsync(StateHasChanged);
    }

    async Task Cancel()
    {
        await ModalInstance.CancelAsync();
    }
    
    private async Task KeyCodeChanged(int index, KeyCode keyCode)
    {
        KeyRecord.KeyCodes[index] = keyCode;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ColorChanged(ChangeEventArgs e)
    {
        var rgbstring = e.Value.ToString();

        KeyRecord.Color = new LedColor(
            byte.Parse(rgbstring[1..3], System.Globalization.NumberStyles.HexNumber),
            byte.Parse(rgbstring[3..5], System.Globalization.NumberStyles.HexNumber),
            byte.Parse(rgbstring[5..7], System.Globalization.NumberStyles.HexNumber));

        await InvokeAsync(StateHasChanged);
    }
}