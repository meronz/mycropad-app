@using System.Timers
@implements IDisposable

<button
    @onclick="Click"
    class="@Class">
    @(_clicked ? "Confirm?" : Text)
</button>

@code {

    private string BaseClass => "transition duration-250 ease-in-out font-bold py-2 px-4 rounded-full";

    private string Class => _clicked
        ? $"{BaseClass} bg-red-400 hover:bg-red-600 text-white"
        : $"{BaseClass} bg-blue-400 hover:bg-blue-600 text-white";

    private bool _clicked = false;
    
    private readonly Timer _resetTimer = new(5000);

    [Parameter]
    public string Text { get; set; } = "";

    [Parameter]
    public Func<Task>? Clicked { get; set; }

    protected override void OnInitialized()
    {
        _resetTimer.AutoReset = false;
        _resetTimer.Elapsed += (_, _) =>
        {
            _clicked = false;
            InvokeAsync(StateHasChanged);
        };
    }

    public void Dispose()
    {
        _resetTimer.Dispose();
        GC.SuppressFinalize(this);
    }

    private void Click()
    {
        if (!_clicked)
        {
            _clicked = true;
            _resetTimer.Enabled = true;
            return;
        }

        Clicked?.Invoke();
    }

}